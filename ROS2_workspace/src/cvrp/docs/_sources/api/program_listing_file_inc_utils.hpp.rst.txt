
.. _program_listing_file_inc_utils.hpp:

Program Listing for File utils.hpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_inc_utils.hpp>` (``inc/utils.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef UTILS_HPP
   #define UTILS_HPP
   
   #include <iostream>
   #include <vector>
   #include <random>
   #include <math.h>
   #include <climits>
   #include <unordered_set>
   #include <set>
   #include <memory>
   #include <algorithm>
   #include <iomanip>
   #include <map>
   #include <queue>
   #include <unistd.h>
   #include <cstdio>
   #include <ctime>
   #include <cxxabi.h>
   #include <typeinfo>
   
   
   #include <chrono>
   #include <functional>
   #include <memory>
   #include <string>
   #include <cmath>
   
   #ifdef VISUALIZE
   
   #include "rclcpp/rclcpp.hpp"
   #include "std_msgs/msg/string.hpp"
   #include "visualization_msgs/msg/marker.hpp"
   
   #endif //VISUALIZE
   
   class Node{
   public:
     int x_, y_, id_, demand_;
     bool is_routed_;
   
     Node(int x = 0,
          int y = 0,
          int id = 0,
          int demand = 0,
          bool is_routed = true)
          :x_(x), y_(y), id_(id), demand_(demand), is_routed_(is_routed){}
   
     void PrintStatus();
   };
   
   class Route{
   public:
     double cost_ = 0;
     std::vector<int> nodes_;
   
     void PrintStatus();
   
     void PrintRoute();
   
     void CalculateCost(std::vector<std::vector<double>> distanceMatrix);
   };
   
   
   class Vehicle: public Route{
   public:
     int id_, load_, capacity_;
   
     Vehicle(int id = 0,
             int load = 0,
             int capacity = 0)
             : id_(id), load_(load), capacity_(capacity){}
   
     void PrintStatus();
   };
   
   class Problem{
   public:
     std::vector<Node> nodes_;
     std::vector<Vehicle> vehicles_;
     std::vector<std::vector<double>> distanceMatrix_;
     Node depot_;
     int capacity_;
   
     Problem(int noc = 1000,
             int demand_range = 40,
             int nov = 50,
             int capacity = 800,
             int grid_range = 1000,
             std::string distribution = "uniform",
             int n_clusters = 5,
             int cluster_range = 10);
   };
   
   // Solution class should not call problems's constructor so not inheriting.
   class Solution{
   public:
     std::vector<Node> nodes_;
     std::vector<Vehicle> vehicles_;
     std::vector<std::vector<double>> distanceMatrix_;
     Node depot_;
     int capacity_;
     std::string solution_string_ = "";
   
     Solution(std::vector<Node> nodes,
              std::vector<Vehicle> vehicles,
              std::vector<std::vector<double>> distanceMatrix);
   
     Solution(Problem p);
   
     void CreateInitialSolution();
   
     bool CheckSolutionValid();
   
     virtual void Solve();
   
     Node find_closest(Vehicle& v);
   
     void PrintSolution(const std::string& option="");
   
   };
   
   // #ifdef VISUALIZE
   
   class MinimalPublisher : public rclcpp::Node
   {
   public:
     MinimalPublisher();
   
     void publishToRViz(const std::string& solution_string, const std::vector<::Node>& nodes);
   
     rclcpp::Publisher<visualization_msgs::msg::Marker>::SharedPtr publisher_;
   };
   
   extern std::shared_ptr<MinimalPublisher> mpp;
   
   // #endif // VISUALIZE
   
   #endif // UTILS_HPP
